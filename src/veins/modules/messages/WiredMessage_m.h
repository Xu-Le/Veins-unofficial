//
// Generated file, do not edit! Created by nedtool 5.0 from veins/modules/messages/WiredMessage.msg.
//

#ifndef __WIREDMESSAGE_M_H
#define __WIREDMESSAGE_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0500
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
enum WiredMsgCC {
    START_TRANSMISSION,
    END_TRANSMISSION,
    NORMAL_DATA_PACKET,
    LAST_DATA_PACKET
};
// }}

/**
 * Class generated from <tt>veins/modules/messages/WiredMessage.msg:28</tt> by nedtool.
 * <pre>
 * packet WiredMessage
 * {
 *     // @brief express which kind of control signaling message.
 *     // 0: request to start transmission;
 *     // 1: request to end transmission;
 *     // 2: normal data packet transmission;
 *     // 3: last data packet transmission;
 *     int controlCode;
 *     int downloader;  // identifier of downloader's application
 *     int contentSize; // content size of requested large volume file
 *     int curOffset;   // current content offset of the data this packet contains
 *     int startOffset; // start offset position of this content
 *     int endOffset;   // end offset position of this content
 * }
 * </pre>
 */
class WiredMessage : public ::omnetpp::cPacket
{
  protected:
    int controlCode;
    int downloader;
    int contentSize;
    int curOffset;
    int startOffset;
    int endOffset;

  private:
    void copy(const WiredMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WiredMessage&);

  public:
    WiredMessage(const char *name=nullptr, int kind=0);
    WiredMessage(const WiredMessage& other);
    virtual ~WiredMessage();
    WiredMessage& operator=(const WiredMessage& other);
    virtual WiredMessage *dup() const {return new WiredMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual int getControlCode() const;
    virtual void setControlCode(int controlCode);
    virtual int getDownloader() const;
    virtual void setDownloader(int downloader);
    virtual int getContentSize() const;
    virtual void setContentSize(int contentSize);
    virtual int getCurOffset() const;
    virtual void setCurOffset(int curOffset);
    virtual int getStartOffset() const;
    virtual void setStartOffset(int startOffset);
    virtual int getEndOffset() const;
    virtual void setEndOffset(int endOffset);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WiredMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WiredMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef __WIREDMESSAGE_M_H

