//
// Generated file, do not edit! Created by nedtool 5.0 from veins/modules/messages/WaitTimeElapsedMessage.msg.
//

#ifndef __WAITTIMEELAPSEDMESSAGE_M_H
#define __WAITTIMEELAPSEDMESSAGE_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0500
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>veins/modules/messages/WaitTimeElapsedMessage.msg:21</tt> by nedtool.
 * <pre>
 * //
 * // Defines a self control message that handle with broadcast suppression wait time elapsed event
 * //
 * message WaitTimeElapsedMessage
 * {
 *     // indicates which packet's wait time elapsed
 *     int GUID = 0;
 *     // whether receive duplicate packets from multiple sources within the waiting period
 *     bool recvDup1 = false;
 *     // whether receive duplicate packets from multiple sources within the additional waiting period
 *     bool recvDup2 = false;
 *     // probability of rebroadcast determined by relative distance between receiver and transmitter
 *     double probability = 1.0;
 * }
 * </pre>
 */
class WaitTimeElapsedMessage : public ::omnetpp::cMessage
{
  protected:
    int GUID;
    bool recvDup1;
    bool recvDup2;
    double probability;

  private:
    void copy(const WaitTimeElapsedMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WaitTimeElapsedMessage&);

  public:
    WaitTimeElapsedMessage(const char *name=nullptr, int kind=0);
    WaitTimeElapsedMessage(const WaitTimeElapsedMessage& other);
    virtual ~WaitTimeElapsedMessage();
    WaitTimeElapsedMessage& operator=(const WaitTimeElapsedMessage& other);
    virtual WaitTimeElapsedMessage *dup() const {return new WaitTimeElapsedMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual int getGUID() const;
    virtual void setGUID(int GUID);
    virtual bool getRecvDup1() const;
    virtual void setRecvDup1(bool recvDup1);
    virtual bool getRecvDup2() const;
    virtual void setRecvDup2(bool recvDup2);
    virtual double getProbability() const;
    virtual void setProbability(double probability);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WaitTimeElapsedMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WaitTimeElapsedMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef __WAITTIMEELAPSEDMESSAGE_M_H

