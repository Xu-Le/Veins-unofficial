//
// Copyright (C) 2018-2019 Xu Le <xmutongxinXuLe@163.com>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//

cplusplus {{
#include "veins/modules/messages/RoutingMessage_m.h"

enum AOMDVPacketType
{
	RREQ = 1,
	RREP = 2,
	RERR = 3,
	RREPACK = 4,
	RREQp = 5,
	RREPp = 6,
	RR = 7,
	LR = 8
};
// Helper struct to represent (L3Address, sequence number) pairs in a RERR message
struct UnreachableNode
{
	long addr;
	unsigned int seqno;
};
// Helper struct to represent tuples in a RREQp message
struct RepairingNode
{
	long addr;
	unsigned int seqno;
	long lastHop;
	unsigned int srcCount;
	long srcs[8]; // static array let us can use default assignment operator generated by compiler
};
// Helper struct to represent tuples in a RREPp message
struct RepairedNode
{
	RepairedNode() : hopCount(0), destAddr(-1), destSeqno(0), lifeTime(), firstHop(-1) {}
	RepairedNode(unsigned char hc, long da, unsigned int ds, simtime_t lt, long fh) : hopCount(hc),
			destAddr(da), destSeqno(ds), lifeTime(lt), firstHop(fh) {}

	unsigned char hopCount;
	long destAddr;
	unsigned int destSeqno;
	simtime_t lifeTime;
	long firstHop;
};
}}

class RoutingMessage;
class noncobject Coord;
class noncobject UnreachableNode;
class noncobject RepairingNode;
class noncobject RepairedNode;

// Represents an AOMDV Route Request
packet RREQMessage extends RoutingMessage
{
	@descriptor(readonly);
	packetType = AOMDVPacketType::RREQ;
	bool joinFlag;
	bool repairFlag;
	bool gratuitousRREPFlag;
	bool destOnlyFlag;
	bool unknownSeqnoFlag;
	bool preemptiveFlag;
	unsigned char hopCount;
	unsigned int rreqId;
	long destAddr;
	unsigned int destSeqno;
	long originatorAddr;
	unsigned int originatorSeqno;
	// 20 bytes AODV RREQ header above, 16/34 + 4*srcCount bytes header below when preemptiveFlag is false/true
	long firstHop;
	long lastHop;
	long breakingNb;
	Coord breakingDir; // count 10 bytes according to IEEE Std 1609.3-2016
	simtime_t minLET;
	unsigned int nbNum;
	unsigned int srcCount;
	long srcs[];
}

// Represents an AOMDV Route Reply
packet RREPMessage extends RoutingMessage
{
	@descriptor(readonly);
	packetType = AOMDVPacketType::RREP;
	bool repairFlag;
	// bool ackRequiredFlag;
	bool preemptiveFlag;
	unsigned char prefixSize;
	unsigned char hopCount;
	long destAddr;
	unsigned int destSeqno;
	long originatorAddr;
	simtime_t lifeTime;
	// 16 bytes AODV RREP header above, 16/20 bytes header below when preemptiveFlag is false/true
	simtime_t minLET;
	unsigned int rreqId;
	long firstHop;
	long lastHop;
	long breakingNb;
}

// Represents an PAOMBR Route Request
packet RREQpMessage extends RoutingMessage
{
	@descriptor(false);
	packetType = AOMDVPacketType::RREQp;
	bool joinFlag;
	bool repairFlag;
	bool gratuitousRREPFlag;
	bool destOnlyFlag;
	unsigned char hopCount;
	unsigned int rreqId;
	long originatorAddr;
	unsigned int originatorSeqno;
	long firstHop;
	long breakingNb;
	Coord breakingDir;
	simtime_t minLET;
	unsigned int nbNum;
	unsigned char destCount;
	RepairingNode repairingNodes[];
}

// Represents an PAOMBR Route Reply
packet RREPpMessage extends RoutingMessage
{
	@descriptor(false);
	packetType = AOMDVPacketType::RREPp;
	long originatorAddr;
	unsigned int rreqId;
	long breakingNb;
	simtime_t minLET;
	unsigned char destCount;
	RepairedNode repairedNodes[];
}

// Represents an AOMDV Route Error
packet RERRMessage extends RoutingMessage
{
	@descriptor(false);
	packetType = AOMDVPacketType::RERR;
	// bool noDeleteFlag;
	unsigned char destCount;
	UnreachableNode unreachableNodes[];
}

// Represents an AOMDV Route Reply ACK
// packet RREPACKMessage extends RoutingMessage {}

// Represents an PAOMBR Receiver Report
packet RRMessage extends RoutingMessage
{
	@descriptor(readonly);
	packetType = AOMDVPacketType::RR;
	long destination;
	long firstHop;
	int lbSeqno;
	int ubSeqno;
	simtime_t delay;
	simtime_t jitter;
}

// Represents an PAOMBR Last hop Report
packet LRMessage extends RoutingMessage
{
	@descriptor(readonly);
	packetType = AOMDVPacketType::LR;
	long destination;
	long oldLastHop;
	long newLastHop;
	unsigned char hopCount;
	simtime_t lifeTime;
	simtime_t minLET;
}

// Represents a timer for a Route Reply packet
message WaitForRREPMessage
{
	@descriptor(false);
    long destAddr;
}
