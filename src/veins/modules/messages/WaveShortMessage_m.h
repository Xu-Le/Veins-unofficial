//
// Generated file, do not edit! Created by nedtool 5.0 from veins/modules/messages/WaveShortMessage.msg.
//

#ifndef __WAVESHORTMESSAGE_M_H
#define __WAVESHORTMESSAGE_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0500
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "veins/base/utils/Coord.h"
class HopItem
{
public:
	HopItem() : addr(0), posX(0.0), posY(0.0), posZ(0.0), speedX(0.0), speedY(0.0), speedZ(0.0) {}
    HopItem(long a, double px, double py, double pz, double sx, double sy, double sz) : addr(a), posX(px), posY(py), posZ(pz), speedX(sx), speedY(sy), speedZ(sz) {}
    HopItem(const HopItem& rhs) : addr(rhs.addr), posX(rhs.posX), posY(rhs.posY), posZ(rhs.posZ), speedX(rhs.speedX), speedY(rhs.speedY), speedZ(rhs.speedZ) {}
    
	long addr;
	double posX;
	double posY;
	double posZ;
	double speedX;
	double speedY;
	double speedZ;
};
typedef std::list<HopItem> HopItems;
// }}

/**
 * Class generated from <tt>veins/modules/messages/WaveShortMessage.msg:43</tt> by nedtool.
 * <pre>
 * packet WaveShortMessage
 * {
 *     int wsmVersion = 1; // Version of the Wave Short Message
 *     int GUID = 0; // Unique identifier of this WaveShortMessage
 *     int securityType = 0; // Determine which security mechanism was used
 *     int channelNumber; // Channel Number on which this packet was sent
 *     int dataRate = 1; // Data rate with which this packet was sent
 *     int priority = 3; // Power Level with which this packet was sent
 *     int serial = 0;
 *     int psid = 0; // Unique number to identify the service
 *     int wsmLength; // Length of Wave Short Message
 *     long senderAddress = -1; // Equal to sender
 * 
 *     double senderAngle; // The driving angle of sender
 * 	// string psc = "Service with some Data"; // Provider Service Context
 * 
 *     Coord senderPos;   // The current position of sender
 *     Coord senderSpeed; // The current speed of sender
 * }
 * </pre>
 */
class WaveShortMessage : public ::omnetpp::cPacket
{
  protected:
    int wsmVersion;
    int GUID;
    int securityType;
    int channelNumber;
    int dataRate;
    int priority;
    int serial;
    int psid;
    int wsmLength;
    long senderAddress;
    double senderAngle;
    Coord senderPos;
    Coord senderSpeed;

  private:
    void copy(const WaveShortMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WaveShortMessage&);

  public:
    WaveShortMessage(const char *name=nullptr, int kind=0);
    WaveShortMessage(const WaveShortMessage& other);
    virtual ~WaveShortMessage();
    WaveShortMessage& operator=(const WaveShortMessage& other);
    virtual WaveShortMessage *dup() const {return new WaveShortMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual int getWsmVersion() const;
    virtual void setWsmVersion(int wsmVersion);
    virtual int getGUID() const;
    virtual void setGUID(int GUID);
    virtual int getSecurityType() const;
    virtual void setSecurityType(int securityType);
    virtual int getChannelNumber() const;
    virtual void setChannelNumber(int channelNumber);
    virtual int getDataRate() const;
    virtual void setDataRate(int dataRate);
    virtual int getPriority() const;
    virtual void setPriority(int priority);
    virtual int getSerial() const;
    virtual void setSerial(int serial);
    virtual int getPsid() const;
    virtual void setPsid(int psid);
    virtual int getWsmLength() const;
    virtual void setWsmLength(int wsmLength);
    virtual long getSenderAddress() const;
    virtual void setSenderAddress(long senderAddress);
    virtual double getSenderAngle() const;
    virtual void setSenderAngle(double senderAngle);
    virtual Coord& getSenderPos();
    virtual const Coord& getSenderPos() const {return const_cast<WaveShortMessage*>(this)->getSenderPos();}
    virtual void setSenderPos(const Coord& senderPos);
    virtual Coord& getSenderSpeed();
    virtual const Coord& getSenderSpeed() const {return const_cast<WaveShortMessage*>(this)->getSenderSpeed();}
    virtual void setSenderSpeed(const Coord& senderSpeed);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WaveShortMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WaveShortMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef __WAVESHORTMESSAGE_M_H

