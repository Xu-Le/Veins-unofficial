//
// Generated file, do not edit! Created by nedtool 5.0 from veins/modules/messages/WarningMessage.msg.
//

#ifndef __WARNINGMESSAGE_M_H
#define __WARNINGMESSAGE_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0500
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "veins/modules/messages/WaveShortMessage_m.h"
// }}

/**
 * Class generated from <tt>veins/modules/messages/WarningMessage.msg:26</tt> by nedtool.
 * <pre>
 * packet WarningMessage extends WaveShortMessage
 * {
 *     bool warningSuccess = false; // Is warning message successfully arrive at farthest vehicle?
 *     bool direction = false; // Is target to opposite vehicle?
 *     int hopCount = 0;   // Total hop count from sender
 *     double farthestDistance = 1000; // The farthest target vehicle for warning message in ROI
 *     string laneId; // Indicates which lane is the warning message's target
 *     HopItems hopInfo;   // Info about every hop vehicle
 * }
 * </pre>
 */
class WarningMessage : public ::WaveShortMessage
{
  protected:
    bool warningSuccess;
    bool direction;
    int hopCount;
    double farthestDistance;
    ::omnetpp::opp_string laneId;
    HopItems hopInfo;

  private:
    void copy(const WarningMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WarningMessage&);

  public:
    WarningMessage(const char *name=nullptr, int kind=0);
    WarningMessage(const WarningMessage& other);
    virtual ~WarningMessage();
    WarningMessage& operator=(const WarningMessage& other);
    virtual WarningMessage *dup() const {return new WarningMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual bool getWarningSuccess() const;
    virtual void setWarningSuccess(bool warningSuccess);
    virtual bool getDirection() const;
    virtual void setDirection(bool direction);
    virtual int getHopCount() const;
    virtual void setHopCount(int hopCount);
    virtual double getFarthestDistance() const;
    virtual void setFarthestDistance(double farthestDistance);
    virtual const char * getLaneId() const;
    virtual void setLaneId(const char * laneId);
    virtual HopItems& getHopInfo();
    virtual const HopItems& getHopInfo() const {return const_cast<WarningMessage*>(this)->getHopInfo();}
    virtual void setHopInfo(const HopItems& hopInfo);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WarningMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WarningMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef __WARNINGMESSAGE_M_H

