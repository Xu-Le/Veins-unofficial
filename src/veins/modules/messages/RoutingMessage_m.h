//
// Generated file, do not edit! Created by nedtool 5.0 from veins/modules/messages/RoutingMessage.msg.
//

#ifndef __ROUTINGMESSAGE_M_H
#define __ROUTINGMESSAGE_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0500
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "veins/modules/messages/WaveShortMessage_m.h"
// }}

/**
 * Class generated from <tt>veins/modules/messages/RoutingMessage.msg:27</tt> by nedtool.
 * <pre>
 * packet RoutingMessage extends WaveShortMessage
 * {
 *     bool routingSuccess = false; // Is routing path successfully found?
 *     bool backward = false; // Is routing result known, notify it backward to sender?
 *     int hopCount = 0;   // Total hop count from sender
 *     long receiver = -1; // Destination vehicle
 *     long nextHop = -1;  // Next selected hop vehicle in routing process
 *     HopItems hopInfo;   // Info about every hop vehicle
 * }
 * </pre>
 */
class RoutingMessage : public ::WaveShortMessage
{
  protected:
    bool routingSuccess;
    bool backward;
    int hopCount;
    long receiver;
    long nextHop;
    HopItems hopInfo;

  private:
    void copy(const RoutingMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const RoutingMessage&);

  public:
    RoutingMessage(const char *name=nullptr, int kind=0);
    RoutingMessage(const RoutingMessage& other);
    virtual ~RoutingMessage();
    RoutingMessage& operator=(const RoutingMessage& other);
    virtual RoutingMessage *dup() const {return new RoutingMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual bool getRoutingSuccess() const;
    virtual void setRoutingSuccess(bool routingSuccess);
    virtual bool getBackward() const;
    virtual void setBackward(bool backward);
    virtual int getHopCount() const;
    virtual void setHopCount(int hopCount);
    virtual long getReceiver() const;
    virtual void setReceiver(long receiver);
    virtual long getNextHop() const;
    virtual void setNextHop(long nextHop);
    virtual HopItems& getHopInfo();
    virtual const HopItems& getHopInfo() const {return const_cast<RoutingMessage*>(this)->getHopInfo();}
    virtual void setHopInfo(const HopItems& hopInfo);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RoutingMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RoutingMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef __ROUTINGMESSAGE_M_H

