//
// Generated file, do not edit! Created by nedtool 5.0 from veins/modules/messages/DataMessage.msg.
//

#ifndef __DATAMESSAGE_M_H
#define __DATAMESSAGE_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0500
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "veins/modules/messages/WaveShortMessage_m.h"
// }}

/**
 * Class generated from <tt>veins/modules/messages/DataMessage.msg:25</tt> by nedtool.
 * <pre>
 * packet DataMessage extends WaveShortMessage
 * {
 *     bool isLast;     // whether it is the last data packet
 *     int receiver;    // identifier of receiver's application
 *     int downloader;  // identifier of downloader's application
 *     int curOffset;   // current content offset of the data this packet contains
 *     int bytesNum;    // this variable exists due to performance consideration, for sending many packets once in transmission
 * }
 * </pre>
 */
class DataMessage : public ::WaveShortMessage
{
  protected:
    bool isLast;
    int receiver;
    int downloader;
    int curOffset;
    int bytesNum;

  private:
    void copy(const DataMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const DataMessage&);

  public:
    DataMessage(const char *name=nullptr, int kind=0);
    DataMessage(const DataMessage& other);
    virtual ~DataMessage();
    DataMessage& operator=(const DataMessage& other);
    virtual DataMessage *dup() const {return new DataMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual bool getIsLast() const;
    virtual void setIsLast(bool isLast);
    virtual int getReceiver() const;
    virtual void setReceiver(int receiver);
    virtual int getDownloader() const;
    virtual void setDownloader(int downloader);
    virtual int getCurOffset() const;
    virtual void setCurOffset(int curOffset);
    virtual int getBytesNum() const;
    virtual void setBytesNum(int bytesNum);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DataMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DataMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef __DATAMESSAGE_M_H

